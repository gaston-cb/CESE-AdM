Preguntas orientadoras 
--------------------------------------
1) Describa brevemente los diferentes perfiles de familias de
microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias
características.
rta: Hay tres perfiles que son A, R y M. 
Los cortex de la familia A están destinados a aplicaciones de propósito general que corren encima de un sistema operativo. 
Puede procesar muchas cosas al mismo tiempo y el procesamiento es no determinista. Por 
Tiene memoria cache 
ejemplo un telefono con android.  
Cortex R: destinados a sistemas de tiempo real duro. Es decir deben garantizar el tiempo de lanzamiento de una tarea mediante una cantidad
de ciclos determinado o menor. Alta capacidad de procesamiento y baja latencia  
Cortex M: Destinado a microcontroladores y dispositivos de consumo masivo, tienen alta densidad de código
	  Tiene bajo consumo. 
-------------------------------------------------------------------------------------------
					CORTEX M 
-------------------------------------------------------------------------------------------
1)  Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y
M4.
rta: Los procesadores cortex M0 poseen bajo consumo y bajo costo. Los procesadores M3 y M4, poseen funcionalidades para DSP. Las instrucciones
de M0 son de 16 bits y de la familia M3 y M4 pertenes a instrucciones de 32 bits. 
Cortex M0,M1 son basados en armv6 
El cortex M4 posee hardware para correr un SO real en forma segura
El cortex M4 posee niveles de ejecución de privilegios(el m0 no tiene)
El cortex M4 tiene FAST MAC, SIMD, y algunos poseen unidad de punto flotante 
El cortex M3 y M4 esta basado en arquitectura ARM-V7
Tanto el cortex M3 y M4 estan pensados para microcontroladores  

--------------------------------------------------------------------------------------------
2) ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique 
La densidad de código se entiende como la realización de una tareas con un tamaño de programa pequeño. 
El set de instrucciones de Thumb permite realizar instrucciones de 32/16 bits y el ensamblador es quien decide que tipo de instrucción utilizar. Esto implica
que para un conjunto de tareas que se deben realizar, hay instrucciones que van a requerir menos instrucciones de codificacion y esto resulta en 
una mejor densidad de código. 
--------------------------------------------------------------------------------------------
3)¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este
tipo de arquitectura? 
Los procesadores ARM, no pueden trabajar directamente sobre la memoria. Por ejemplo, para incrementa en uno un valor almacenado en memoria, 
los pasos debén ser los siguientes en arm: "leer memoria y guardar en registro" - "incrementar el valor de registro en uno" - "volver a cargar
el valor en memoria" 
Los operandos son siempre registros del microcontrolador. En cualquier caso de operación sobre la memoria, primero se debe realizar la carga del 
valor en un registro del procesador. Esto significa que la arquitectura es "load-store". Los detalles de los registros se conocen como "programmer's model". 
--------------------------------------------------------------------------------------------

4)¿Cómo es el mapa de memoria de la familia? 
  El mapa de memoria de la familia llega hasta 4GB, por que tiene un direccionamiento de 32bits. Esta dividido en 
  stack, periféricos, sram y flash. Además permite el uso de bit-banding, que son regiones de memoria de 8bits mapeadas
  a un bit de la memoria. Esta acción es repetible por cada zona de memoria. Por ejemplo en la configuración de periféricos
--------------------------------------------------------------------------------------------
5) ¿Qué ventajas presenta el uso de los "shadowed pointers" del PSP y el MSP?  
--------------------------------------------------------------------------------------------
6) Describa diferentes modos de privilegio y operación del cortex M, sus relaciones y como se conmuta 
   de uno al otro. Describa un ejemplo en el que se pasa del modo privilegiado a no privilegiado y nuevamente a 
   privilegiado
--------------------------------------------------------------------------------------------
7) ¿Que se entiende por modelo de registros ortogonal? 
   Se entiende que todos los registros son de propósito general. 
--------------------------------------------------------------------------------------------
8) ¿Qué ventajas presenta el uso de instrucciones de ejecución condicional (IT)?Dé un ejemplo 
   El uso de instrucciones de ejecución condicional evita la ejecución de una instrucción al darse una determinada 
   condición, porque la instrucción se ejecuta en caso de que la comparación sea cierta. Por ej: 
	ADDNE R0,RO,R1 -> R0 = RO + R1 
   Si la operación de R0+R1 no es cero, entonces realiza la suma y la guarda en R0. En caso
   de ser cero, entonces no ejecuta la instrucción ADD, y actualiza los flag de estados
--------------------------------------------------------------------------------------------
9) Describa brevemente las excepciones más prioritarias 
--------------------------------------------------------------------------------------------
10) Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno? 
--------------------------------------------------------------------------------------------
11) Describa la secuencia de reset del microcontrolador 
--------------------------------------------------------------------------------------------
12) ¿Que entiende por "core peripherals"?¿Qué diferencia existe entre estos y el resto de los periféricos? 
    Se entiende que son periféricos propios de la arquitectura de cortex, y son comunes a todos los cortex. Estos son NVIC, MPU, systick timer
    y varios registros programables SBC. El resto de perifericos los define el fabricante. En el caso del cortex M3, se encontró la siguiente
    referencia por "core peripheral": 
    https://developer.arm.com/documentation/dui0552/a/introduction/about-the-cortex-m3-processor-and-core-peripherals/cortex-m3-core-peripherals


--------------------------------------------------------------------------------------------
13) ¿Como se implementan las prioridades de las interrupciones ? 
    Se implementan a través del core peripheral denominado NVIC (Nested Vector Interrupt Controller) y las prioridades de las interrupciones pueden cambiar 
    en tiempo de ejecución. Además hay funciones de enmascaramiento que permiten enmascarar ISR y excepciones(NMI no aplica) por debajo de 
    cierto nivel de prioridad. Estas prioridades en NVIC puede usarse a través de la interfaz de CMSIS-core. El número de ISR viene determinado por el fabricante 
--------------------------------------------------------------------------------------------
14) ¿Qué es el CMSIS? ¿Qué función cumple?¿ Quién lo provee?¿Que ventajas aporta?
    CMSIS fue desarrollado por ARM para permitir que los proveedores de microcontroladores usen una infraestructura de software para 
    microcontroladores cortex-M que sea consistente. De hecho, hay microcontroladores "CMSIS-compliant" 
    Como el software cada vez es más complejo, y viene de diferentes partes, ARM con el fin de facilitar el desarrollo y la interoperabilidad 
    ARM trabajó con proveedores de soluciones de software para el desarrollo de CMSIS, que es un framework que cubre la mayoria de los casos  
    de microcontroladores cortex M. La ventaja principal es la portabilidad y reutilización de código porque CMSIS es un estandar, donde solo 
    se debe cambiar la capa de acceso a los periféricos (en caso que se utilicen). Además CMSIS provee acceso adicional a donde C no puede acceder[yiu pag 49 - 2º párrafo].
    Es una interfaz de programación definida por ARM, donde se definen las ISR de sistema, siendo estas de la 0 a la 15, y el resto de 
    interrupciones se las deja al fabricante. Esta interfaz logra compatibilidad en las operaciones del sistema. Las ISR de la 16 a la 255
    las deja a criterio del fabricante. 
    Al definir las ISR de la 0 a la 15, permite compatibilidad de código a las llamadas del sistema, donde de la 16 a las 255 si se 
    utilizan periféricos del microcontrolador se deben reprogramar o ver cual es la forma de migrarlos. 
--------------------------------------------------------------------------------------------
15) Cuando ocurre una interrupcion, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender la subrutina 
	correspondiente? 
--------------------------------------------------------------------------------------------
16) Explique las características avanzadas de atención a interrupciones: tail chaining y late
arrival.
--------------------------------------------------------------------------------------------
17) Como cambia la operación de stacking al utilizar la unidad de punto flotante 
--------------------------------------------------------------------------------------------
18) ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?
--------------------------------------------------------------------------------------------
19)¿Qué funciones cumple la unidad de protección de memoria (MPU)?
Es un dispositivo que monitorea las transacciones del bus y necesita que se configure por software. Las aplicaciones
pueden dividir el espacio de memoria y definir permisos de acceso para cada uno de ellos. Al violarse una de estas 
reglas, se genera una excepción de falla y se podrá analizar el problema para corregirlo. 
Es la unidad de protección de memoria y sirve para proteger que ciertas acciones se lleven a cabo en la memoria, protegiendo
determinadas direcciones. Por ejemplo si el sistema utiliza un SO, no permite que los hilos o procesos escriben en lugares 
indebidos. Si lo llegan a realizar, entonces ejecuta un error de "segmentation fault" (averiguar que es) 
--------------------------------------------------------------------------------------------
20)¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber
solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las
regiones definidas?
--------------------------------------------------------------------------------------------
21) ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto
de las excepciones? Dé un ejemplo
--------------------------------------------------------------------------------------------
22) ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un
sistema operativo embebido.
-------------------------------------------------------------------------------------------
					ISA 
-------------------------------------------------------------------------------------------
 1) ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo
-------------------------------------------------------------------------------------------
 2) ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo
-------------------------------------------------------------------------------------------
 3) ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un
ejemplo con operaciones con datos de 8 bits.
	Se utiliza para generar una saturación por valores negativos o positivos ante el incremento de una variable que produzca 
	overflow o bit de carry. En este caso, aunque se siga sumando o restando, llega a un "tope" que esta dado por este 
	tipo de instrucciones de aritmética saturada. 
	Por ejemplo: el siguiente codigo: 
	uint8_t a = 0 ; 
	while(1){a++} 
	Si tiene instrucciones de aritmética saturada, entonces llega a toma el tope de 255. En caso de no utilizarlas, reinicia 
	a cero cada vez que llega a 255 
-------------------------------------------------------------------------------------------
 4) Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos
	de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la
	pila antes de ser modificados? 
    Los argumentos están definidos por una convención de llamadas, denominado "calling convections", y define los registros del R0 al R4 como 
    los registros en donde se encuentrán los argumentos. Si posee más de cuatro argumentos, entonces se deja en la memoria (ver rta en el yiu) 
-------------------------------------------------------------------------------------------
 5)¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un
ejemplo. 
Es una instrucción que realiza multiples pasos en uno solo. 